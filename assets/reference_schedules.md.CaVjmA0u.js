import{_ as e,c as i,o as a,ah as n}from"./chunks/framework.C68zQAZh.js";const c=JSON.parse('{"title":"Schedules","description":"","frontmatter":{},"headers":[],"relativePath":"reference/schedules.md","filePath":"reference/schedules.md","lastUpdated":1761295582000}'),t={name:"reference/schedules.md"};function l(h,s,r,d,p,o){return a(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="schedules" tabindex="-1">Schedules <a class="header-anchor" href="#schedules" aria-label="Permalink to “Schedules”">​</a></h1><p>Schedules gives you a flexible way to define when to read sensors from the inverter and when to report these sensors to MQTT (or Home Assistant). The same schedule can apply to many sensors.</p><p>The default behaviour, without any configuration override will assign the following schedules to the sensors:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>+-----------+-----+------+--------+-----------+----------+------------+</span></span>
<span class="line"><span>|    Key    | src | Read | Report | Change by | Change % | Change any |</span></span>
<span class="line"><span>+-----------+-----+------+--------+-----------+----------+------------+</span></span>
<span class="line"><span>| date_time |     |  60  |   60   |           |          |    True    |</span></span>
<span class="line"><span>|     rw    |     |  5   |  300   |           |          |    True    |</span></span>
<span class="line"><span>|     w     |     |  5   |   60   |     80    |          |            |</span></span>
<span class="line"><span>|    kwh    |     | 300  |  300   |           |          |            |</span></span>
<span class="line"><span>|  any_unit |     |  15  |  300   |           |          |            |</span></span>
<span class="line"><span>|  no_unit  |     |  15  |  300   |           |          |    True    |</span></span>
<span class="line"><span>+-----------+-----+------+--------+-----------+----------+------------+</span></span></code></pre></div><p>What this means is that:</p><ol><li>Specific sensors, based on the sensor&#39;s name <ul><li>Read &amp; report the <code>date_time</code> sensor every minute</li></ul></li><li>Configuration sensors (<code>key = &#39;rw&#39;</code>): <ul><li>Read every 5 seconds, report every 5 minutes. If there is any change, report immediately.</li></ul></li><li>Based on the sensor&#39;s unit <ul><li>For sensors with a unit of <code>W</code>, read every 5 seconds, and report every minute. If there is a significant change of 80Watts report immediately.</li><li>For sensors with a unit of <code>kWH</code>, read &amp; report every 5 minutes. These are typically used by Home Assistant&#39;s Energy Management and aggregated every hour, so you really don&#39;t need to update them often.</li></ul></li><li>Sensors with any unit (<code>key = &#39;any_unit&#39;</code>) <ul><li>Read every 15 seconds and report the avreage every 60 seconds.</li></ul></li><li>Sensors without a unit (<code>key = &#39;no_unit&#39;</code>) <ul><li>Read every 15 seconds, report every 5 minutes, or if there is any change.</li></ul></li></ol><p>You can add any (more specific) schedule and even override the defaults in the configuration.</p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>Sensor modifiers have been replaced with schedules.</p></div><h2 id="schedule-entries" tabindex="-1">Schedule entries <a class="header-anchor" href="#schedule-entries" aria-label="Permalink to “Schedule entries”">​</a></h2><p>A schedule entry is defined with the following fields:</p><table tabindex="0"><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td>KEY</td><td>The sensor name, unit or one of the special keys. See <a href="#keys">keys</a></td></tr><tr><td>READ_EVERY</td><td>Read the sensor every x seconds.</td></tr><tr><td>REPORT_EVERY</td><td>Report the sensor value to MQTT every x seconds.</td></tr><tr><td>CHANGE_ANY</td><td>Report the value immediately upon any change. Useful for configuration and text based sensors. (true/false)</td></tr><tr><td>CHANGE_BY</td><td>Report the sensor when there is a significant change. Example. Report power immedialtely when the power changes by x.</td></tr><tr><td>CHANGE_PERCENT</td><td>Report when there is an x percent change in the sensor value.</td></tr></tbody></table><h2 id="keys" tabindex="-1">Keys <a class="header-anchor" href="#keys" aria-label="Permalink to “Keys”">​</a></h2><p>The <code>KEY</code> value of the sensor is used to identify sensors, these are show in the table below. The key is unique and can be used to change the default behaviour.</p><table tabindex="0"><thead><tr><th>Order</th><th>Key value</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td><em>name</em></td><td>A specific name of a sensor.</td></tr><tr><td>2</td><td><code>rw</code></td><td>Read &amp; write sensors (RWSensors in the definitions). Used for all configuration</td></tr><tr><td>3</td><td><em>unit</em></td><td>A Sensor unit. Can be W, kWh, V, A, etc</td></tr><tr><td>4</td><td><code>any_unit</code></td><td>A catch-all for sensors with any unit. These are typically numerical sensors of some type.</td></tr><tr><td>5</td><td><code>no_unit</code></td><td>A catch-all for sensors without any unit. Typically non-numeric sensors.</td></tr></tbody></table><p>To find a schedule for any specific sensor, the search order in column 1 will be followed. This allows you to be very specific for sensors with a proper name, or be very generic for sensors with &amp; without units.</p><h2 id="proposed-schedule-overrides-for-solarman" tabindex="-1">Proposed schedule overrides for Solarman <a class="header-anchor" href="#proposed-schedule-overrides-for-solarman" aria-label="Permalink to “Proposed schedule overrides for Solarman”">​</a></h2><p>When using the <code>solarman</code> driver, the Solarman dongle can be overwhelmed when constantly being read. Ideally you should not read more than once every 10 seconds.</p><p>The following schedule overrides are recommended for Solarman:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SCHEDULES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">W</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  READ_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REPORT_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  CHANGE_BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RW</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  READ_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REPORT_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  CHANGE_ANY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">any_unit</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  READ_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REPORT_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  CHANGE_BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span></code></pre></div><p>An Example to change the battery sensor to update on all changes, including changing the read time to 30s instead of the default 15s.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  READ_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REPORT_EVERY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  CHANGE_ANY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>you can also use the sensor name &#39;battery_soc&#39;</p>`,22)])])}const E=e(t,[["render",l]]);export{c as __pageData,E as default};
